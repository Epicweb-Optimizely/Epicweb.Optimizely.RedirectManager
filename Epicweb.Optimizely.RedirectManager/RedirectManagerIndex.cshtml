@using EPiServer.Framework.Web.Resources
@using EPiServer.ServiceLocation
@using EPiServer.Shell.Navigation
@using Epicweb.Optimizely.RedirectManager
@using Microsoft.AspNetCore.Http
@inject RedirectService RedirectService
@inject RedirectRuleStorage RedirectRuleStorage
@inject IHttpContextAccessor HttpContextAccessor

@model RedirectManagerViewModel
@{
    Layout = null;
    OnLoad();    
}

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta http-equiv="x-ua-compatible" content="ie=edge">
        <title>Redirect manager</title>

        <!-- Shell -->
        @ClientResources.RenderResources("ShellCore")

        <!-- LightTheme -->
        @ClientResources.RenderResources("ShellCoreLightTheme")

    <script>
        function resizeIframe(obj) {
            obj.style.height = 0;
            const newHeight = Math.max(document.body.clientHeight, document.documentElement.clientHeight);
            obj.style.height = newHeight + 'px';
        }

        window.addEventListener('DOMContentLoaded', (event) => {
            const containerIframe = document.getElementById('scrollbox');
            resizeIframe(containerIframe);
            window.addEventListener("resize", () => resizeIframe(containerIframe));
        });
    </script>

    <!-- Latest compiled and minified CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    </head>

    <body>
    @Html.AntiForgeryToken()
    @Html.CreatePlatformNavigationMenu()

    <div class="outer-container" id="scrollbox" @Html.ApplyPlatformNavigation()>

        <div class="container">

        <div class="accordion">

            @if (!RedirectRuleStorage.TableExist)
            {
                <div class="accordion-item card-danger">
                <div class="accordion-heading">
                    <button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="" aria-expanded="true" aria-controls="">Table @(RedirectRuleStorage.RedirectTableName) does not exist!</button></div>
                    <div class="accordion-body">
                        <a class="btn btn-danger" href="@(Request.Path)?action=createtable">Create Table @(RedirectRuleStorage.RedirectTableName)</a>
                    </div>
                </div>
            }

            <div class="accordion-item @(Request.Query["action"] == "select" ? "panel-info" : "panel-success")">
                <div class="accordion-heading">
                    <div class="accordion-title"><button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#addPanel" aria-expanded="false" aria-controls="addPanel">@(Request.Query["action"] == "select" ? "Modify redirect rule" : "Add new redirect rule")</button></div>
                </div>
           
                <div id="addPanel" class="accordion-collapse accordion-body collapse @(Request.Query["action"] == "select" ? "show" : "")">
                    @using(Html.BeginForm("create","redirectmanager", new {}, FormMethod.Post, true, new  {@class="form-inline" })){
                        <input type="hidden" name="action" value="@(Request.Query["action"]=="select" ? "modify" : "add")" />
                        <input type="hidden" name="id" value="@(Request.Query["id"])" />
                        <div class="row">
                            <div class="col-md-3">
                                <div class="input-group  input-group-sm">
                                    <span class="input-group-text" title="Order of rules">Order</span>
                                    @Html.TextBoxFor(x=>x.SortOrder,new {@type="number",@class="form-control input-sm",@style="width:80px;",@placeholder="1"})
                                </div>
                            </div>
                            <div class="col-md-9">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text" title="If Host field is *, the rule affects on all domains.">Host</span>
                                        @{
                                            var selectedHost = CurrentRedirect?.Host ?? "*";
                                            var hostOptions = new[] { "*" }.Concat(RedirectService.GetGlobalHostOptions()).Select(host => new SelectListItem(){ Text = host, Value = host, Selected = selectedHost == host });
                                        
                                        }

                                        @Html.DropDownList("host", hostOptions, null, new{ title="Host", name="host", @class="form-control input-sm"})

                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-9">
                                <div class="input-group input-group-sm">
                                        <span class="input-group-text label" for="" title="Relative address which address or addresses are redirected.">From Url</span>
                                    <a data-toggle="tooltip" class="tooltipLink" data-original-title="Relative address which address or addresses are redirected.">
                                        <span class="glyphicon glyphicon-info-sign"></span>
                                    </a>
                                    @Html.TextBoxFor(x=>x.FromUrl,new{@class="form-control input-sm",placeholder="/example/redirect"})
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="input-group  input-group-sm">
                                        <span class="input-group-text" for="" title="Wildcard allows redirecting all addresses which start with 'From Url' prefix.">
                                            Wildcard
                                        </span>

                                        @Html.CheckBoxFor(x=>x.WildCard,new {@class="form-check-input input-sm checkbox",style="width: 31px; height: 31px; margin-top:0"})
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-9">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text label" title="Url can be absolute or relative address.">
                                        To Url
                                    </span>
                                    @Html.TextBoxFor(x=>x.ToUrl,new {@class="form-control input-sm",placeholder="/redirect/to"})
                                </div>
                                <span style="font-size:9pt">or</span>
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text label" title="Content Id is the Optimizely CMS content ID number. If Content Id field is set then the 'To Url' is dismissed.">
                                        To Content Id
                                    </span>
                                    @Html.TextBoxFor(x=>x.ToConentId,new {@class="form-control input-sm",@type="number",style="width:90px;",placeholder="1"})
                                </div>
                                <div class="input-group input-group-sm mt-2">
                                    <span class="input-group-text label" title="">
                                        Language
                                    </span>
                                        @{
                                            var selectedLang = CurrentRedirect?.ToContentLang ?? "";
                                            var languageOptions = new[] { "" }.Concat(RedirectService.GetGlobalLanguageOptions()).Select(lang => new SelectListItem(){ Text = lang, Value = lang, Selected = selectedLang == lang });
                                        }

                                        @Html.DropDownList("tocontentlang", languageOptions, null, new{ title="language", name="tocontentlang", @class="form-control input-sm"})

                                </div>
                            </div>
                        </div>
                        <div class="row">
                             <div class="col-md-9"></div>
                            <div class="col-md-3">
                                <button type="submit" class="btn btn-sm @(Request.Query["action"] == "select" ? "btn-info" : "btn-success")">Save</button>
                                @if (Request.Query["action"] == "select")
                                {
                                    <a href="@Request.Path" class="btn btn-sm btn-warning">Cancel</a>
                                }
                            </div>
                        </div>
                   }
                </div>
            </div>

            <div class="accordion-item card-danger">
                <div class="accordion-heading">
                    <div class="accordion-title"><button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#addPanel2" aria-expanded="false" aria-controls="addPanel2">Remove duplicate rules</button></div>
                </div>
                <div class="accordion-collapse accordion-body collapse @(Request.Query["action"] == "dup" ? "in" : "out")" id="addPanel2">
                    @if (!string.IsNullOrEmpty(Request.Query["message"]))
                    {
                        @Request.Query["message"]
                    }
                    else
                    {
                    <a class="btn btn-danger" href="@(Request.Path)?action=dupl">Remove duplicate rules safely and check for removed urls</a>
                    }
                </div>
            </div>

        </div>
        <div class="rules pt-3 pb-3">
            <table class="table table-condensed table-hover table-sm">
                <thead>
                    <tr>
                        <th>Order</th>
                        <th>Host</th>
                        <th>From Url</th>
                        <th>Wildcard</th>
                        <th>To Url</th>
                        <th>To Content Id</th>
                        <th>Lang</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var result in RedirectService.List())
                    {
                        <tr>
                            <td>@(result.SortOrder)</td>
                            <td>@(result.Host)</td>
                            <td><b>@(result.FromUrl)</b></td>
                            <td><input type="checkbox" class="checkbox input-xs" @(result.Wildcard ? "checked" : null) disabled /></td>
                            <td><b>@(result.ToUrl)</b></td>
                            <td><b>@(result.ToContentId)</b></td>
                            <td>@(result.ToContentLang)</td>
                            <td>
                                <a class="btn btn-sm btn-info" href="@($"{Request.Path}?action=select&id={result.Id}")">MODIFY</a>
                                <a class="btn btn-sm btn-danger" href="@($"{Request.Path}?action=delete&id={result.Id}")" onclick="return confirm('Are you sure you want to delete this rule?');">DELETE</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="accordion">
            <div class="accordion-item panel-default">
                <div class="accordion-heading">
                    <div class="accordion-title"><button type="button" class="accordion-button collapsed" data-bs-toggle="collapse" data-bs-target="#instructionsPanel" aria-expanded="false" aria-controls="instructionsPanel">Instructions</button></div>
                </div>
                <div id="instructionsPanel" class="accordion-collapse accordion-body collapse">
                    <p>Redirect Manager allows to add, modify and remove <b>permanent redirection rules</b> (alias HTTP 301, Moved Permanently).</p>
                    <p>Rules are redirected in 404 handler, so all the pages and static content overrides these rules.</p>
                    <p>Url addresses are <b>NOT case sensitive</b>. Also the <b>trailing slash (/) in urls' is removed</b> before rule's are applied.</p>
                    <p>Wildcard rules redirect all the addresses that starts with the from url address.</p>
                    <p>Be careful, it's possible to create eternal loop and damage the service.</p>
                </div>
        </div>
        </div>
    </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <style>
        .outer-container {
            margin-top: 60px;
            width: 100%;
        }

        .container {
            padding-bottom: 100px;
        }

        .label {
            width:110px;
        }
        .epi-uif-list-item-text.mdc-list-item__text {
            font-size: 15px;
        }
        .epi-pn-navigation .mdc-top-app-bar__title {
            font-size: 14px;
        }
        
        .epi-pn-navigation  .mdc-tab {
            font-size: 14px;
        }
        .table-sm {
            font-size: 12px;
        }
        input, span, select {
            height: 31px !important;
        }
        .row{
            margin-top: 5px;
            margin-bottom: 5px;
        }

        a.btn { color: white;}

        #scrollbox {
            height: 500px; /* Adjust the height as needed */
            overflow-y: auto;
        }
    </style>
</body>
</html>

@functions{

    public RedirectRule CurrentRedirect = null;
    HttpRequest Request = null;

    public void OnLoad()
    {
        Request = HttpContextAccessor.HttpContext.Request;

        if (Request.Path == null) return;
        if (int.TryParse(Request.Query["id"], out int id))
        {
            CurrentRedirect = RedirectService.GetRedirect(id);
            Model.SortOrder = CurrentRedirect?.SortOrder ?? 100;
            Model.WildCard = CurrentRedirect?.Wildcard ?? false;
            Model.FromUrl = CurrentRedirect.FromUrl;
            Model.Id = CurrentRedirect.Id;
            Model.Action = Request.Query["action"];
            Model.Host = CurrentRedirect.Host;
            Model.ToUrl = CurrentRedirect.ToUrl;
            Model.ToConentId = CurrentRedirect.ToContentId;
            Model.ToContentLang = CurrentRedirect.ToContentLang;
        }
       
        if (Request.Query["action"] == "delete")
        {
            int n = RedirectService.DeleteRedirect(CurrentRedirect.Id);
            if (n > 0)
            {
                 HttpContextAccessor.HttpContext.Response.Redirect(Request.Path);
            }
        }

        if (Request.Query["action"] == "dupl")
        {
            int cc = RedirectService.CleanupRulesJob();
             HttpContextAccessor.HttpContext.Response.Redirect(Request.Path + $"?action=dup&message=Removed {cc} rules");            
        }

        if (Request.Query["action"] == "createtable")
        {
            RedirectRuleStorage.CreateTable();
             HttpContextAccessor.HttpContext.Response.Redirect(Request.Path);
        }

    }

}